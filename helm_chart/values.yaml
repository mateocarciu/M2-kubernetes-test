# ===============================================
# OroCommerce Helm Chart - Configuration principale
# ===============================================
# 
# Ce fichier principal importe les configurations depuis 
# des fichiers spécialisés pour une meilleure organisation.
#
# Structure des fichiers de configuration :
# - values/global.yaml      : Configuration globale
# - values/images.yaml      : Images Docker
# - values/storage.yaml     : Stockage et volumes
# - values/application.yaml : Configuration applicative
# - values/database.yaml    : Configuration PostgreSQL
# - values/nginx.yaml       : Configuration NGINX
#
# ===============================================

# Import des configurations depuis les fichiers spécialisés
# Note: Dans Helm, l'import de fichiers YAML multiples n'est pas 
# natif. Cette structure documumente l'organisation recommandée.

# Configuration globale par défaut (à adapter selon votre environnement)
global:
  namespace: orocommerce
  replicaCount: 1
  protocol: https

# Pour utiliser cette structure modulaire, vous pouvez :
# 1. Merger les fichiers values/*.yaml avant le déploiement
# 2. Utiliser les valeurs inline ci-dessous
# 3. Ou passer plusieurs fichiers avec -f à helm install

# ===============================================
# CONFIGURATION INLINE (temporaire)
# ===============================================
# Les valeurs ci-dessous sont temporaires en attendant 
# la mise en place d'un système de merge automatique

# Configuration des images Docker
images:
  oroImage: oroinc/orocommerce-application
  oroImageTag: 6.1.0
  oroImageInit: oroinc/orocommerce-application-init-fr
  oroImageInitTag: 6.1.0
  oroImageBaseRuntime: oroinc/runtime
  oroImageBaseRuntimeTag: 6.1-latest

# Configuration de sécurité
appSecurityContext:
  runAsUser: 2002
  runAsGroup: 2001

rootSecurityContext:
  runAsUser: 0

# Configuration des logs
envLogValue: php://stderr

# Configuration du stockage
storageClass:
  name: local-storage
  provisioner: kubernetes.io/no-provisioner
  volumeBindingMode: WaitForFirstConsumer
  reclaimPolicy: Retain

persistentVolumes:
  nodeHostname: minikube
  # Volumes de l'application
  appCapacity: 10Gi
  appAccessModes:
    - ReadWriteMany
    - ReadOnlyMany
  appHostPath: /orocommerce/app
  
  # Cache
  appCacheCapacity: 10Gi
  appCacheAccessModes:
    - ReadWriteMany
    - ReadOnlyMany
  appCacheHostPath: /orocommerce/cache
  
  # Maintenance
  appMaintenanceCapacity: 10Gi
  appMaintenanceAccessModes:
    - ReadWriteMany
    - ReadOnlyMany
  appMaintenanceHostPath: /orocommerce/maintenance
  
  # Opérations multi-hôtes
  appMultihostOperationCapacity: 10Gi
  appMultihostOperationAccessModes:
    - ReadWriteMany
    - ReadOnlyMany
  appMultihostOperationHostPath: /orocommerce/multihost-operation
  
  # Dossiers privés
  appPrivateCapacity: 10Gi
  appPrivateAccessModes:
    - ReadWriteMany
    - ReadOnlyMany
  appPrivateHostPath: /orocommerce/private
  
  # Dossiers publics
  appPublicCapacity: 10Gi
  appPublicAccessModes:
    - ReadWriteMany
    - ReadOnlyMany
  appPublicHostPath: /orocommerce/public
  
  # NGINX
  nginxCapacity: 10Gi
  nginxAccessModes:
    - ReadWriteMany
  nginxHostPath: /orocommerce/nginx
  
  # PostgreSQL
  postgreCapacity: 10Gi
  postgreAccessModes:
    - ReadWriteOncePod
  postgreHostPath: /orocommerce/postgre

# Configuration PostgreSQL
postgre:
  defaultContainerName: postgre
  defaultLivenessProbe:
    exec:
      command:
        - /bin/sh
        - -c
        - exec pg_isready -U orodbuser -d orodb
    failureThreshold: 6
    initialDelaySeconds: 60
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  defaultReadinessProbe:
    exec:
      command:
        - /bin/sh
        - -c
        - -e
        - |
          exec pg_isready -U orodbuser -d orodb
    failureThreshold: 6
    initialDelaySeconds: 60
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  defaultContainerResource:
    requests:
      memory: "500Mi"
      cpu: "500m"
    limits:
      memory: "1000Mi"
      cpu: "1000m"

# Configuration de l'application
app:
  defaultContainerName: orocommerce-app
  defaultLivenessProbe:
    exec:
      command:
          - /bin/sh
          - -c
          - php-fpm-healthcheck
    periodSeconds: 5
    initialDelaySeconds: 15
    timeoutSeconds: 30
  defaultContainerResource:
    requests:
      memory: "500Mi"
      cpu: "500m"
    limits:
      memory: "1000Mi"
      cpu: "1000m"
  hpaMinReplicas: 1
  hpaMaxReplicas: 2
  hpaAverageCpuUtilization: 20

# Configuration NGINX
nginx:
  initContainerName: ngnix-init
  initContainerCommand: 
  defaultContainerName: nginx
  defaultLivenessProbe:
    httpGet:
      path: /
      port: 80
    initialDelaySeconds: 15
    periodSeconds: 5
    timeoutSeconds: 30
  defaultStartupProbe:
    httpGet:
      path: /
      port: 80
    initialDelaySeconds: 15
    periodSeconds: 5
    timeoutSeconds: 30
  ingressClass: nginx
  ingressHost: oro.demo
  defaultContainerResource:
    requests:
      memory: "500Mi"
      cpu: "500m"
    limits:
      memory: "1000Mi"
      cpu: "1000m"

# Configuration des services annexes
consumer:
  initContainerName: verify-connection
  defaultContainerName: consumer
  defaultContainerResource:
    requests:
      memory: "250Mi"
      cpu: "250m"
    limits:
      memory: "500Mi"
      cpu: "500m"

cron:
  initContainerName: verify-connection
  defaultContainerName: cron
  defaultContainerResource:
    requests:
      memory: "250Mi"
      cpu: "250m"
    limits:
      memory: "500Mi"
      cpu: "500m"

websocket:
  initContainerName: verify-connection
  defaultContainerName: websocket

restore:
  verifyConnectionContainerName: verify-connection
  initContainerName: volume-init
  defaultContainerName: restore
  restartPolicy: Never
  defaultContainerResource:
    requests:
      memory: "500Mi"
      cpu: "500m"
    limits:
      memory: "1000Mi"
      cpu: "1000m"

# Configuration des secrets
secrets:
  protocol: https
